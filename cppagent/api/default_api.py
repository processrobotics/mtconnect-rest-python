# coding: utf-8

"""
    MTConnect â€“ REST API

    MTConnect REST API   # noqa: E501

    OpenAPI spec version: MTConnect Agent Version 2.4.0.7
    Contact: will@metalogi.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cppagent.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_asset_id_delete(self, asset_id, **kwargs):  # noqa: E501
        """Delete asset identified by `assetId`  # noqa: E501

        Marks the asset as removed and creates an AssetRemoved event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_delete(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_asset_id_delete_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_asset_id_delete_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def asset_asset_id_delete_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete asset identified by `assetId`  # noqa: E501

        Marks the asset as removed and creates an AssetRemoved event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_delete_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_asset_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_asset_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset/{assetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_asset_id_post(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_post(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def asset_asset_id_post_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_post_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_asset_id_put(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_put(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_asset_id_put_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_asset_id_put_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def asset_asset_id_put_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_id_put_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_asset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_asset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset/{assetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_asset_ids_get(self, asset_ids, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns a set of assets identified by asset ids `asset` separated by semi-colon (;)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_ids_get(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_ids: Semi-colon (;) separated list of assetIds (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_asset_ids_get_with_http_info(asset_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_asset_ids_get_with_http_info(asset_ids, **kwargs)  # noqa: E501
            return data

    def asset_asset_ids_get_with_http_info(self, asset_ids, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns a set of assets identified by asset ids `asset` separated by semi-colon (;)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_asset_ids_get_with_http_info(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_ids: Semi-colon (;) separated list of assetIds (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_asset_ids_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_ids' is set
        if ('asset_ids' not in params or
                params['asset_ids'] is None):
            raise ValueError("Missing the required parameter `asset_ids` when calling `asset_asset_ids_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_ids' in params:
            path_params['assetIds'] = params['asset_ids']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset/{assetIds}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_delete(self, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_get(self, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns up to `count` assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns up to `count` assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'device', 'pretty', 'removed', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'removed' in params:
            query_params.append(('removed', params['removed']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_post(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_post_with_http_info(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_put(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_put_with_http_info(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/asset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_asset_id_delete(self, asset_id, **kwargs):  # noqa: E501
        """Delete asset identified by `assetId`  # noqa: E501

        Marks the asset as removed and creates an AssetRemoved event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_delete(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_asset_id_delete_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_asset_id_delete_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def assets_asset_id_delete_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Delete asset identified by `assetId`  # noqa: E501

        Marks the asset as removed and creates an AssetRemoved event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_delete_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_asset_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `assets_asset_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{assetId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_asset_id_post(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_post(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_asset_id_post_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def assets_asset_id_post_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_post_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `assets_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_asset_id_put(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_put(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_asset_id_put_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_asset_id_put_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def assets_asset_id_put_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_id_put_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: An assetId to select (required)
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_asset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `assets_asset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{assetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_asset_ids_get(self, asset_ids, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns a set assets identified by asset ids `asset` separated by semi-colon (;)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_ids_get(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_ids: Semi-colon (;) separated list of assetIds (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_asset_ids_get_with_http_info(asset_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_asset_ids_get_with_http_info(asset_ids, **kwargs)  # noqa: E501
            return data

    def assets_asset_ids_get_with_http_info(self, asset_ids, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns a set assets identified by asset ids `asset` separated by semi-colon (;)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_asset_ids_get_with_http_info(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_ids: Semi-colon (;) separated list of assetIds (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_asset_ids_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_ids' is set
        if ('asset_ids' not in params or
                params['asset_ids'] is None):
            raise ValueError("Missing the required parameter `asset_ids` when calling `assets_asset_ids_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_ids' in params:
            path_params['assetIds'] = params['asset_ids']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{assetIds}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_delete(self, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_delete_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_delete" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_get(self, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns up to `count` assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns up to `count` assets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'device', 'pretty', 'removed', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'removed' in params:
            query_params.append(('removed', params['removed']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_post(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_post_with_http_info(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_put(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_put_with_http_info(self, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def current_get(self, **kwargs):  # noqa: E501
        """MTConnect current request  # noqa: E501

        Gets a stapshot of the state of all the observations for all devices optionally filtered by the `path`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int at: Sequence number at which the observation snapshot is taken
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.current_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.current_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def current_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect current request  # noqa: E501

        Gets a stapshot of the state of all the observations for all devices optionally filtered by the `path`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.current_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int at: Sequence number at which the observation snapshot is taken
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['at', 'device_type', 'interval', 'path', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method current_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'at' in params:
            query_params.append(('at', params['at']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_asset_id_post(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_asset_id_post(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_asset_id_post_with_http_info(device, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_asset_id_post_with_http_info(device, asset_id, **kwargs)  # noqa: E501
            return data

    def device_asset_asset_id_post_with_http_info(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_asset_id_post_with_http_info(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'asset_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_asset_id_post`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `device_asset_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_asset_id_put(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_asset_id_put(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_asset_id_put_with_http_info(device, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_asset_id_put_with_http_info(device, asset_id, **kwargs)  # noqa: E501
            return data

    def device_asset_asset_id_put_with_http_info(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_asset_id_put_with_http_info(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'asset_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_asset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_asset_id_put`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `device_asset_asset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset/{assetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_delete(self, device, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_delete(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_delete_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_delete_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_asset_delete_with_http_info(self, device, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_delete_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_get(self, device, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns up to `count` assets for deivce `device`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_asset_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect asset request  # noqa: E501

        Returns up to `count` assets for deivce `device`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'count', 'device', 'pretty', 'removed', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'removed' in params:
            query_params.append(('removed', params['removed']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_post(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_post(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_post_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_post_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_asset_post_with_http_info(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_post_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_asset_put(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_put(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_asset_put_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_asset_put_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_asset_put_with_http_info(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_asset_put_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_asset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_asset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/asset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_asset_id_post(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_asset_id_post(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_asset_id_post_with_http_info(device, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_asset_id_post_with_http_info(device, asset_id, **kwargs)  # noqa: E501
            return data

    def device_assets_asset_id_post_with_http_info(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_asset_id_post_with_http_info(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'asset_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_asset_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_asset_id_post`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `device_assets_asset_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets/{assetId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_asset_id_put(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_asset_id_put(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_asset_id_put_with_http_info(device, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_asset_id_put_with_http_info(device, asset_id, **kwargs)  # noqa: E501
            return data

    def device_assets_asset_id_put_with_http_info(self, device, asset_id, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_asset_id_put_with_http_info(device, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str asset_id: An assetId to select (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'asset_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_asset_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_asset_id_put`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `device_assets_asset_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets/{assetId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_delete(self, device, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_delete(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_delete_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_delete_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_assets_delete_with_http_info(self, device, **kwargs):  # noqa: E501
        """Delete all assets for a device and type  # noqa: E501

        Device and type are optional. If they are not given, it assumes there is no constraint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_delete_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_get(self, device, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns up to `count` assets for deivce `device`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_assets_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect assets request  # noqa: E501

        Returns up to `count` assets for deivce `device`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device: Device UUID or name
        :param bool pretty: Instructs the result to be pretty printed
        :param bool removed: Boolean indicating if removed assets are included in results
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'count', 'device', 'pretty', 'removed', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device' in params:
            query_params.append(('device', params['device']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'removed' in params:
            query_params.append(('removed', params['removed']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_post(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_post(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_post_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_post_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_assets_post_with_http_info(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_post_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_assets_put(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_put(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_assets_put_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_assets_put_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_assets_put_with_http_info(self, device, **kwargs):  # noqa: E501
        """Upload an asset by identified by `assetId`  # noqa: E501

        Updates or adds an asset with the asset XML in the body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_assets_put_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str type: Only include assets of type `type` in the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_assets_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_assets_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/assets', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_current_get(self, device, **kwargs):  # noqa: E501
        """MTConnect current request  # noqa: E501

        Gets a stapshot of the state of all the observations for device `device` optionally filtered by the `path`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_current_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int at: Sequence number at which the observation snapshot is taken
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_current_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_current_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_current_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect current request  # noqa: E501

        Gets a stapshot of the state of all the observations for device `device` optionally filtered by the `path`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_current_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int at: Sequence number at which the observation snapshot is taken
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'at', 'device_type', 'interval', 'path', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_current_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_current_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'at' in params:
            query_params.append(('at', params['at']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_get(self, device, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for device identified by `device` matching `name` or `uuid`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for device identified by `device` matching `name` or `uuid`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'device_type', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_post(self, device, **kwargs):  # noqa: E501
        """Non-normative POST to update a value in the agent  # noqa: E501

        The data of the POST contains the dataItem=value observation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_post(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str time:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_post_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_post_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_post_with_http_info(self, device, **kwargs):  # noqa: E501
        """Non-normative POST to update a value in the agent  # noqa: E501

        The data of the POST contains the dataItem=value observation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_post_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str time:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_probe_get(self, device, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for device identified by `device` matching `name` or `uuid`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_probe_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_probe_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_probe_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_probe_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for device identified by `device` matching `name` or `uuid`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_probe_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'device_type', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_probe_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_probe_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/probe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_put(self, device, **kwargs):  # noqa: E501
        """Non-normative PUT to update a value in the agent  # noqa: E501

        The data of the PUT contains the dataItem=value observation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_put(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str time:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_put_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_put_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_put_with_http_info(self, device, **kwargs):  # noqa: E501
        """Non-normative PUT to update a value in the agent  # noqa: E501

        The data of the PUT contains the dataItem=value observation data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_put_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param str time:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_sample_get(self, device, **kwargs):  # noqa: E501
        """MTConnect sample request  # noqa: E501

        Gets a time series of at maximum `count` observations for device `device` optionally filtered by the `path` and starting at `from`. By default, from is the first available observation known to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sample_get(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int _from: Sequence number at to start reporting observations
        :param int heartbeat: Time in ms between publishing a empty document when no data has changed
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :param int to: Sequence number at to stop reporting observations
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.device_sample_get_with_http_info(device, **kwargs)  # noqa: E501
        else:
            (data) = self.device_sample_get_with_http_info(device, **kwargs)  # noqa: E501
            return data

    def device_sample_get_with_http_info(self, device, **kwargs):  # noqa: E501
        """MTConnect sample request  # noqa: E501

        Gets a time series of at maximum `count` observations for device `device` optionally filtered by the `path` and starting at `from`. By default, from is the first available observation known to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_sample_get_with_http_info(device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device: Device UUID or name (required)
        :param int count: Maximum number of entities to include in results
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int _from: Sequence number at to start reporting observations
        :param int heartbeat: Time in ms between publishing a empty document when no data has changed
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :param int to: Sequence number at to stop reporting observations
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'count', 'device_type', '_from', 'heartbeat', 'interval', 'path', 'pretty', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_sample_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params or
                params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `device_sample_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device' in params:
            path_params['device'] = params['device']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'heartbeat' in params:
            query_params.append(('heartbeat', params['heartbeat']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{device}/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def probe_get(self, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for all devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.probe_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.probe_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def probe_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for all devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_type', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method probe_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/probe', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def root_get(self, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for all devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.root_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.root_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def root_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect probe request  # noqa: E501

        Provides metadata service for the MTConnect Devices information model for all devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.root_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param bool pretty: Instructs the result to be pretty printed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_type', 'pretty']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method root_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_get(self, **kwargs):  # noqa: E501
        """MTConnect sample request  # noqa: E501

        Gets a time series of at maximum `count` observations for all devices optionally filtered by the `path` and starting at `from`. By default, from is the first available observation known to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int _from: Sequence number at to start reporting observations
        :param int heartbeat: Time in ms between publishing a empty document when no data has changed
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :param int to: Sequence number at to stop reporting observations
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_get_with_http_info(self, **kwargs):  # noqa: E501
        """MTConnect sample request  # noqa: E501

        Gets a time series of at maximum `count` observations for all devices optionally filtered by the `path` and starting at `from`. By default, from is the first available observation known to the agent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int count: Maximum number of entities to include in results
        :param str device_type: Values are 'Device' or 'Agent'. Selects only devices of that type.
        :param int _from: Sequence number at to start reporting observations
        :param int heartbeat: Time in ms between publishing a empty document when no data has changed
        :param int interval: Time in ms between publishing dataâ€“starts streaming
        :param str path: XPath to filter DataItems matched against the probe document
        :param bool pretty: Instructs the result to be pretty printed
        :param int to: Sequence number at to stop reporting observations
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'device_type', '_from', 'heartbeat', 'interval', 'path', 'pretty', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'device_type' in params:
            query_params.append(('deviceType', params['device_type']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'heartbeat' in params:
            query_params.append(('heartbeat', params['heartbeat']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'pretty' in params:
            query_params.append(('pretty', params['pretty']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
